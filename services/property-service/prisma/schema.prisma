generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model properties {
  id                  Int                  @id @default(autoincrement())
  sender_id           Int?
  title               String
  slug                String?               @unique
  description         String?
  before_price_tag    String
  price               Decimal              @db.Decimal(15, 2)
  after_price_tag     String
  assets_id           Int
  needs_id            Int
  stage               Stage
  request_status      RequestStatus?
  requestpost_status  RequestPostStatus?
  created_at          DateTime             @default(now())
  updated_at          DateTime             @default(now())

  assets              property_categories  @relation("AssetCategory", fields: [assets_id], references: [id])
  needs               property_categories  @relation("NeedCategory", fields: [needs_id], references: [id])

  locations           property_location?
  media               property_media[]
  details             property_detail[]
  amenities           property_amenities[]
  agentHistory        property_agent_history[]
}

model property_location {
  id            Int       @id @default(autoincrement())
  property_id   Int       @unique
  addr_city     String
  addr_district String
  addr_street   String
  addr_details  String?
  latitude      Float?
  longitude     Float?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())

  property      properties @relation(fields: [property_id], references: [id])
}

model property_media {
  id          Int       @id @default(autoincrement())
  name        String?
  property_id Int
  type        MediaType
  url         String
  order       Int?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())

  property    properties @relation(fields: [property_id], references: [id])
}

model property_categories {
  id                  Int                        @id @default(autoincrement())
  type                CategoryType
  parent_category_id  Int?
  name                String?
  slug                String?                    @unique
  is_active           Boolean?
  created_at          DateTime                   @default(now())
  updated_at          DateTime                   @default(now())

  parent              property_categories?       @relation("CategoryParent", fields: [parent_category_id], references: [id])
  children            property_categories[]      @relation("CategoryParent")

  asAsset             properties[]               @relation("AssetCategory")
  asNeed              properties[]               @relation("NeedCategory")
  details             property_category_detail[]
}

model property_category_detail {
  id                Int               @id @default(autoincrement())
  category_id       Int
  field_name        String
  field_type        FieldType
  field_placeholder String?
  icon              String?
  option            Json?
  unit              String?
  is_active         Boolean?
  is_require        Boolean?
  is_showing        Boolean?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @default(now())

  category          property_categories @relation(fields: [category_id], references: [id])
  propertyDetails   property_detail[]        @relation("DetailToCategoryDetail")
}

model property_detail {
  id                 Int                      @id @default(autoincrement())
  property_id        Int
  category_detail_id Int?                    
  value              String
  created_at         DateTime                 @default(now())
  updated_at         DateTime                 @default(now())

  property           properties               @relation(fields: [property_id], references: [id])
  category_detail    property_category_detail? @relation("DetailToCategoryDetail", fields: [category_detail_id], references: [id])
}

model amenities {
  id                 Int          @id @default(autoincrement())
  parent_amentity_id Int?
  name               String
  is_active          Boolean?
  created_at         DateTime     @default(now())
  updated_at         DateTime     @default(now())

  parent             amenities?   @relation("AmenityParent", fields: [parent_amentity_id], references: [id])
  children           amenities[]  @relation("AmenityParent")
  propertyAmenities  property_amenities[]
}

model property_amenities {
  id           Int       @id @default(autoincrement())
  property_id  Int
  amenity_id   Int

  property     properties @relation(fields: [property_id], references: [id])
  amenity      amenities  @relation(fields: [amenity_id], references: [id])
}

model property_agent_history {
  id           Int        @id @default(autoincrement())
  property_id  Int
  agent_id     Int
  type         AgentHistoryType
  created_at   DateTime   @default(now())

  property     properties @relation(fields: [property_id], references: [id])
} 

model commissions {
  id           Int        @id @default(autoincrement())
  property_id  Int
  status       CommissionStatus @default(processing)
  type         CommissionType @default(buying)
  commission   Decimal    @db.Decimal(15, 2)
  latest_price Decimal?   @db.Decimal(15, 2)
  contract_url String?
  created_at   DateTime   @default(now())
  updated_at   DateTime   @default(now())
}

enum CommissionStatus {
  processing
  completed
  failed
}

enum CommissionType {
  buying
  rental
}

enum Stage {
  request
  post
}

enum RequestStatus {
  pending
  negotiating
  published
  rejected
}

enum RequestPostStatus {
  draft
  pending_approval
  rejected
  published
  sold
  expired
  hidden
}

enum MediaType {
  image
  vr
  youtube
  legal_document
}

enum CategoryType {
  assets
  needs
}

enum FieldType {
  number
  text
  select
  date
  boolean
}

enum AgentHistoryType {
  request
  assigned
  leaved
}
